let r = red(img)
let g = green(img)
let b = blue(img)
let rb = red(base)
let gb = green(base)
let bb = blue(base)

let exists(p) = volume(p) .>. 0
let forall(p) = volume(p) .=. volume(tt)
let forallin(x,p) = forall( (!x) | p)

let door = (r =. 0) & (b =. 255) & (g =. 0)
let floorNoDoor = (rb =. 255) & (bb =. 255) & (gb =. 255)
let floor = floorNoDoor & (!door)
let wall = !floor


let mrRed = (r =. 255) & (b =. 0) & (g =. 0)
let mrGreen = (r =. 0) & (b =. 0) & (g =. 255)

let mrX = mrRed | mrGreen

let initial2 = exists(mrRed & ((x =. 0) & (y =. 4))) .&. exists(mrGreen & ((x =. 2) & (y =. 4)))
let initial3 = exists(mrRed & ((x =. 0) & (y =. 4))) .&. exists(mrGreen & ((x =. 2) & (y =. 4)))
let junction = (x >. 4) & (x <. 10) & floor
let legal = (x <=. 4) & floor
let exitLeft = (y =. 4) & (x =. 10)
let exitRight = (y =. 1) & (x =. 10)
let exitX = exitLeft | exitRight
let exitMrX = mrX & exitX
let legalMrX = mrX & legal

let combination1 = exists(mrRed & exitLeft) .&. exists(mrGreen & exitRight)
let combination2 = exists(mrGreen & exitLeft) .&. exists(mrRed & exitRight)

let final3 = combination1 .|. combination2

let forbidden3 = exists(mrRed & junction) .&. exists(mrGreen & junction)
//.&. !.exists(legalMrX) .&. !.final3