let r = red(img)
let g = green(img)
let b = blue(img)
let rb = red(base)
let gb = green(base)
let bb = blue(base)

let exists(p) = volume(p) .>. 0
let forall(p) = volume(p) .=. volume(tt)
let forallin(x,p) = forall( (!x) | p)

let gate = (r =. 0) & (b =. 255) & (g =. 0)
let floorNoDoor = (r =. 255) & (b =. 255) & (g =. 255)
let floor = floorNoDoor & (!gate)
let wall = !floor

let mrRed = (r =. 255) & (b =. 0) & (g =. 0)
let mrGreen = (r =. 0) & (b =. 0) & (g =. 255)

let mrX = mrRed | mrGreen

let initial2 = exists(mrRed & ((x =. 0) & (y =. 4))) .&. exists(mrGreen & ((x =. 2) & (y =. 4)))
let initial3 = exists(mrRed & ((x =. 0) & (y =. 4))) .&. exists(mrGreen & ((x =. 2) & (y =. 4)))
let junction = (x >. 4) & (x <. 9)
let out = (x >.0) & (x <. 4)
let outOfJunction = (x >. 8) & (x <. 11)
let gateOpen = (floor & x =. 4)
let gOp1 = exists(gateOpen) .&. exists(mrRed & out) .&. exists(mrGreen & junction)
let gOp2 = exists(gateOpen) .&. exists(mrGreen & out) .&. exists(mrRed & junction)
let wrongSignal = gOp1 .|. gOp2

let combination1 = exists(mrRed & outOfJunction) .&. exists(mrGreen & outOfJunction)
let combination2 = exists(mrGreen & outOfJunction) .&. exists(mrRed & outOfJunction)

let final3 = combination1 .|. combination2

let forbidden3 = (exists(mrRed & junction) .&. exists(mrGreen & junction)) .|. wrongSignal